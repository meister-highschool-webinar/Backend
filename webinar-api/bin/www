#!/usr/bin/env node

const debug = require('debug')('webinar-api:server');
const http = require('http');

const dotenv = require('dotenv').config({ path: "../.env" });
const uuid = require('uuid');
const xss = require("xss");

const access_token = uuid.v4();
const access_t0ken = uuid.v4();
process.env.access_t0ken = access_t0ken;
process.env.access_token = access_token;

const web = require('../modules/slack').init()
console.log(`액세스 토큰은 \`${access_token}\`입니다.`)

const app = require('../app');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
const io = require('../modules/websocket').init(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log(`Server running at ${port}`);

if (process.env.ENV === 'deploy') {
    web.chat.postMessage({
        text: `서버가 실행되었습니다. 액세스 토큰은 \`${access_token}\`입니다.`,
        channel: process.env.SLACK_NOTIFIER
    });
    web.chat.postMessage({
        text: `서버가 실행되었습니다. 액세스 토큰은 \`${access_t0ken}\`입니다.`,
        channel: process.env.SLACK_N0TIFIER
    });
}

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

const { verifyJWT } = require("../middlewares/auth.middle");
const { chatLog } = require("../models");

let connected = 0;
let msg_id = 0;
io.on('connection', async(socket) => {
    const token = socket.request._query['token'];
    try {
        socket.session = await verifyJWT(token, process.env.JWT_SALT);
    } catch (e) {
        // ignored
    }
    io.emit('connected_change', ++connected);

    socket.on('disconnect', _ => {
        io.emit('connected_change', --connected);
    });

    socket.on('send message', async(text, question) => {
        const user = socket.session;
        if (!user) return;

        const chat = (await chatLog.create({
            msg_id: ++msg_id,
            student_name: user.student_name,
            text: xss(text),
            question: question
        })).dataValues;

        chat.school_name = user.school_name.substring(0, 2);
        io.emit('receive message', chat);

    });
});

io.on('admin_connection', async(socket) => {
    const token = socket.request._query['token'];
    try {
        socket.session = await verifyJWT(token, process.env.JWT_ADMIN_SALT);
    } catch (e) {
        // ignored
    }

    socket.on('delete message', async(msgId) => {
        const user = socket.session;
        if (!user) return;

        await chatLog.update({
            deleted_flag: true,
            deleted_time: Date.now()
        }, { where: { msg_id: msgId } })

        chat.school_name = user.school_name.substring(0, 2);
        io.emit('delete receive message', msgId);

    });
});