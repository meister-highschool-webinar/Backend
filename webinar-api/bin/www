#!/usr/bin/env node

const debug = require('debug')('webinar-api:server');
const http = require('http');

const { WebClient } = require('@slack/web-api');
const dotenv = require('dotenv');
const uuid = require('uuid');

dotenv.config({path: '../.env'});

access_token = uuid.v4();
process.env.access_token = access_token;

const web = new WebClient(process.env.SLACK_TOKEN);
console.log(`액세스 토큰은 \`${access_token}\`입니다.`)

const app = require('../app');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log(`Server running at ${port}`);

if (process.env.ENV === 'deploy')
  web.chat.postMessage({
    text: `서버가 실행되었습니다. 액세스 토큰은 \`${access_token}\`입니다.`,
    channel: process.env.SLACK_NOTIFIER
  });

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
